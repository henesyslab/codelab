image: agcodedev/gitlabci:latest

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
cache:
  paths:
  - vendor/

laravel tests:
  stage: test
  only:
    - master
    - production
  script:
    # Install dependencies.
    - composer install

    # Copy over testing configuration.
    - cp .env.example .env
    - sed -i 's/^APP_ENV=.*$/APP_ENV=testing/g' .env
    - sed -i 's/^DB_HOST=.*$/DB_HOST=sqlite/g' .env
    - sed -i 's/^DB_DATABASE=.*$/DB_DATABASE=":memory:"/g' .env
    - sed -i 's/^CACHE_DRIVER=.*$/CACHE_DRIVER=array/g' .env
    - sed -i 's/^SESSION_DRIVER=.*$/SESSION_DRIVER=array/g' .env
    - sed -i 's/^MAIL_DRIVER=.*$/MAIL_DRIVER=log/g' .env

    # Generate an application key. Re-cache.
    - php artisan key:generate
    - php artisan config:cache

    # run laravel tests
    - php vendor/bin/phpunit --coverage-text --colors=never

deploy beta:
  stage: deploy
  environment:
    name: staging
    url: https://www.codedev.com.br
  only:
    - master
  script:
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")

    # For Docker builds disable host key checking. Be aware that by adding that
    # you are suspectible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

    # Commands to run on remote host
    - >
      ssh $SSH_USER_HOST <<'ENDSSH'
        cd ~/.home/codedev/brain
        git reset --hard && git clean -df
        git checkout master
        git pull --rebase
        composer install --no-dev
        php artisan migrate:fresh --seed
      ENDSSH

deploy live:
  stage: deploy
  environment:
    name: production
    url: https://www.codedev.com.br
  only:
    - production
  script:
    # Run ssh-agent (inside the build environment)
    - eval $(ssh-agent -s)

    # Add the SSH key stored in SSH_PRIVATE_KEY variable to the agent store
    - ssh-add <(echo "$SSH_PRIVATE_KEY")

    # For Docker builds disable host key checking. Be aware that by adding that
    # you are suspectible to man-in-the-middle attacks.
    # WARNING: Use this only with the Docker executor, if you use it with shell
    # you will overwrite your user's SSH config.
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

    # Commands to run on remote host
    - >
      ssh $SSH_USER_HOST <<'ENDSSH'
        cd ~/.home/codedev/brain
        git checkout production
        git pull --rebase
      ENDSSH
